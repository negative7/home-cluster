---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: radarr
  namespace: default
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 1.5.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    initContainers:
      01-init-db:
        image: ghcr.io/onedr0p/postgres-init:14.9
        imagePullPolicy: IfNotPresent
        envFrom: &envFrom
          - secretRef:
              name: radarr-secret
    controller:
      annotations:
        reloader.stakater.com/auto: "true"
    image:
      repository: ghcr.io/onedr0p/radarr-develop
      tag: 5.0.3.8107@sha256:2c4fca668420dfa87b286da9b0a43f6dc64fd26329f9e914bc2de58887091eaf
    env:
      TZ: "${TIMEZONE}"
      PUSHOVER_DEBUG: "false"
      RADARR__AUTHENTICATION_METHOD: External
      RADARR__AUTHENTICATION_REQUIRED: DisabledForLocalAddresses
      RADARR__INSTANCE_NAME: Radarr
      RADARR__PORT: &port 7878
      RADARR__LOG_LEVEL: info
      RADARR__THEME: dark
    envFrom: *envFrom
    service:
      main:
        ports:
          http:
            port: *port
    probes:
      liveness: &probes
        enabled: true
        custom: true
        spec:
          httpGet:
            path: /ping
            port: *port
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 3
      readiness: *probes
      startup:
        enabled: false
    ingress:
      main:
        enabled: true
        ingressClassName: internal
        hosts:
          - host: &host "{{ .Release.Name }}.${SECRET_PUBLIC_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
    podSecurityContext:
      runAsUser: 568
      runAsGroup: 568
      fsGroup: 568
      fsGroupChangePolicy: OnRootMismatch
      supplementalGroups: [10000]
    persistence:
      config:
        enabled: true
        existingClaim: radarr-config
      media:
        enabled: true
        type: nfs
        server: "freenas.${SECRET_PUBLIC_DOMAIN}"
        path: /mnt/tank/media/movies
        readOnly: false
      completed:
        enabled: true
        type: nfs
        server: "freenas.${SECRET_PUBLIC_DOMAIN}"
        path: /mnt/tank/data
        readOnly: false
      backup:
        enabled: true
        type: nfs
        server: 'freenas.${SECRET_PUBLIC_DOMAIN}'
        path: /mnt/tank/backups/radarr
        mountPath: /config/Backups
        readOnly: false
    resources:
      requests:
        cpu: 14m
        memory: 431M
      limits:
        memory: 2500Mi
