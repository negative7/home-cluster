---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 35.2.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  install:
    createNamespace: true
    remediation:
      retries: 3
  upgrade:
    remediation:
      retries: 3
  values:
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_SLACK_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
          - name: "null"
          - name: "slack"
            slack_configs:
              - channel: "alerts"
                icon_url: https://avatars3.githubusercontent.com/u/3380462
                username: "Alertmanager"
                color: '{{ if eq .Status "firing" }}danger{{ else }}good{{ end }}'
                send_resolved: true
                title_link: |-
                  {{ .ExternalURL }}/#/alerts?receiver={{ .Receiver | urlquery }}
                title: |-
                  [{{ .Status | toUpper -}}
                  {{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{- end -}}
                  ] {{ .CommonLabels.alertname }}
                text: |-
                  {{- range .Alerts }}
                    {{- if ne .Labels.severity "" }}
                      *Severity:* _{{ .Labels.severity }}_
                    {{- else }}
                      *Severity:* _N/A_
                    {{- end }}
                    {{- if ne .Annotations.description "" }}
                      *Description:* _{{ .Annotations.description }}_
                    {{- else if ne .Annotations.summary "" }}
                      *Summary:* _{{ .Annotations.summary }}_
                    {{- else if ne .Annotations.message "" }}
                      *Message:* _{{ .Annotations.message }}_
                    {{- else }}
                      *Description:* _N/A_
                    {{- end }}
                    {{- if gt (len .Labels.SortedPairs) 0 }}
                      *Details:*
                      {{- range .Labels.SortedPairs }}
                        â€¢ *{{ .Name }}:* _{{ .Value }}_
                      {{- end }}
                    {{- end }}
                  {{- end }}
          - name: "nodered"
            webhook_configs:
              - url: "http://node-red.home:1880/alertmanager"
                send_resolved: true
        route:
          group_by: ["alertname", "job"]
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: "slack"
          routes:
            - receiver: "null"
              matchers:
                - alertname =~ "InfoInhibitor|Watchdog"
            - receiver: "null"
              match:
                alertname: Watchdog
            - receiver: "slack"
              matchers:
                - severity = "critical"
              continue: true
            - receiver: "nodered"
              matchers:
                - alertname = "MinerDown"
              continue: true
        inhibit_rules:
          - source_matchers:
              - severity = "critical"
            target_matchers:
              - severity = "warning"
            equal: ["alertname", "namespace"]
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - &host "alert-manager.${SECRET_PUBLIC_DOMAIN}"
        tls:
          - hosts:
              - *host
      alertmanagerSpec:
        alertmanagerSpec:
        replicas: 3
        podAntiAffinity: hard
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 1Gi
      prometheus:
        monitor:
          enabled: true
          relabelings:
            - action: replace
              regex: (.*)
              replacement: $1
              sourceLabels:
                - __meta_kubernetes_pod_node_name
              targetLabel: kubernetes_node
    grafana:
      enabled: false
      forceDeployDashboards: true
      sidecar:
        dashboards:
          multicluster:
            etcd:
              enabled: true
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.2.0.21
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.2.0.21
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
    kubeProxy:
      enabled: true
      endpoints:
        - 10.2.0.21
    kubeEtcd:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "nginx"
        hosts:
          - &host "prometheus.${SECRET_PUBLIC_DOMAIN}"
        tls:
          - hosts:
              - *host
      thanosService:
        enabled: true
      thanosServiceMonitor:
        enabled: true
      prometheusSpec:
        replicas: 3
        replicaExternalLabelName: "replica"
        podAntiAffinity: hard
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        retention: 6h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 10Gi
        thanos:
          image: quay.io/thanos/thanos:v0.26.0
          version: v0.22.0
          objectStorageConfig:
            name: thanos-objstore
            key: objstore.yml
        resources:
          requests:
            cpu: 250m
            memory: 2000Mi
          limits:
            memory: 6000Mi
        additionalScrapeConfigs:
          - job_name: "node-exporter"
            honor_timestamps: true
            static_configs:
              - targets:
                  - ${SECRET_MINIO_IP}:9100
                  - 10.0.4.250:9100
                  - 10.0.1.1:9100
          - job_name: coredns
            honor_timestamps: true
            static_configs:
              - targets:
                  - "${SECRET_MINIO_IP}:9149"
          - job_name: minio-job
            bearer_token: ${SECRET_MINIO_BEARER_TOKEN}
            metrics_path: /minio/v2/metrics/cluster
            scheme: http
            static_configs:
              - targets:
                  - "${SECRET_MINIO_IP}:9000"
