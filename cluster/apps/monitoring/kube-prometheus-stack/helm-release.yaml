---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://prometheus-community.github.io/helm-charts
      chart: kube-prometheus-stack
      version: 18.0.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
      interval: 5m
  values:
    prometheusOperator:
      createCustomResource: false
    alertmanager:
      config:
        global:
          slack_api_url: "${SECRET_ALERT_MANAGER_SLACK_WEBHOOK}"
          resolve_timeout: 5m
        receivers:
        - name: 'null'
        - name: 'slack'
          slack_configs:
          - channel: 'k8s'
            icon_url: https://avatars3.githubusercontent.com/u/3380462
            username: 'Alertmanager'
            send_resolved: true
            title: |-
              [{{ .Status | toUpper }}{{ if eq .Status "firing" }}:{{ .Alerts.Firing | len }}{{ end }}] {{ if ne .CommonAnnotations.summary ""}}{{ .CommonAnnotations.summary }} {{ else if ne .CommonAnnotations.message ""}}{{ .CommonAnnotations.message }} {{ else if ne .CommonAnnotations.description ""}}{{ .CommonAnnotations.description }} {{ else }}{{ .CommonLabels.alertname }}{{ end }}
            text: >-
              {{ range .Alerts -}}
                *Alert:* {{ .Annotations.title }}{{ if .Labels.severity }} - `{{ .Labels.severity }}`{{ end }}

              {{ if ne .Annotations.summary ""}}*Summary:* {{ .Annotations.summary }} {{ else if ne .Annotations.message ""}}*Message:* {{ .Annotations.message }} {{ else if ne .Annotations.description ""}}*Description:* {{ .Annotations.description }}{{ end }}

              *Details:*
                {{ range .Labels.SortedPairs }} â€¢ *{{ .Name }}:* `{{ .Value }}`
                {{ end }}
              {{ end }}
        # - name: 'webhook'
        #   webhook_configs:
        #   - url: "http://192.168.1.35:9000/hooks/webhook-ups"
        #     send_resolved: false
        route:
          group_by: ['alertname', 'job']
          group_wait: 30s
          group_interval: 5m
          repeat_interval: 6h
          receiver: 'slack'
          routes:
          - receiver: 'null'
            match:
              alertname: Watchdog
          - receiver: 'slack'
            match_re:
              # severity: critical|warning
              severity: critical
            continue: true
          # - receiver: 'webhook'
          #   match:
          #     alertname: UPS15MinutesRemaining
          #   continue: true
        inhibit_rules:
        - source_match:
            severity: 'critical'
          target_match:
            severity: 'warning'
          equal: ['alertname', 'namespace']
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        hosts:
        - "alert-manager.${HOMELAB_DOMAIN}"
        tls:
        - hosts:
          - "alert-manager.${HOMELAB_DOMAIN}"
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 10Gi
    nodeExporter:
      serviceMonitor:
        relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels:
          - __meta_kubernetes_pod_node_name
          targetLabel: kubernetes_node
    grafana:
      enabled: false
    kubelet:
      enabled: true
      serviceMonitor:
        metricRelabelings:
        - action: replace
          sourceLabels:
          - node
          targetLabel: instance
    kubeApiServer:
      enabled: true
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kubeEtcd:
      enabled: false
    prometheus:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: "traefik"
        annotations:
          traefik.ingress.kubernetes.io/router.entrypoints: "web"
        hosts:
        - "prometheus.${HOMELAB_DOMAIN}"
      prometheusSpec:
        replicas: 2
        replicaExternalLabelName: "replica"
        ruleSelector: {}
        ruleNamespaceSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelector: {}
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelector: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        retention: 672h
        enableAdminAPI: true
        walCompression: true
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: "longhorn"
              resources:
                requests:
                  storage: 50Gi
        additionalScrapeConfigs:
        - job_name: 'node-exporter'
          honor_timestamps: true
          static_configs:
          - targets:
            # freenas
            - 10.2.0.10:9100
        # - job_name: cadvisor
        #   honor_timestamps: true
        #   metrics_path: /metrics
        #   static_configs:
        #   - targets:
        #     # rocinante nas
        #     - 192.168.42.40:9123
        # - job_name: 'minio'
        #   honor_timestamps: true
        #   metrics_path: /minio/prometheus/metrics
        #   static_configs:
        #   - targets:
        #     - 192.168.42.40:9000
        # - job_name: 'nexus'
        #   honor_timestamps: true
        #   metrics_path: /service/metrics/prometheus
        #   basic_auth:
        #     username: admin
        #     password: password
        #   static_configs:
        #   - targets:
        #     - 192.168.42.40:8081
    kube-state-metrics:
      fullnameOverride: kube-state-metrics
